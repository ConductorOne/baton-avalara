name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run linters
        uses: golangci/golangci-lint-action@v5
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        go-version: [1.22.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go tests
        run: (set -o pipefail && go test -v -covermode=count -json ./... | tee test.json)
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      BATON_USERNAME: 'testuser'
      BATON_PASSWORD: 'testpass'
      TEST_SERVER_PORT: 8080
      BATON_ENVIRONMENT: "test"
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build baton-avalara
        run: go build ./cmd/baton-avalara
      - name: Build test server
        run: go build -o test-server ./cmd/test-server
      - name: Start test server
        run: ./test-server &
      - name: Wait for test server to start
        run: sleep 5
      - name: Run baton-avalara
        run: ./baton-avalara

      - name: Install baton
        run: ./scripts/get-baton.sh && mv baton /usr/local/bin

      - name: Check synced data
        run: |
          # Check entitlements
          baton entitlements --output-format=json | jq --exit-status '.entitlements | length > 0'
          # Check grants
          baton grants --output-format=json | jq --exit-status '.grants | length > 0'

      - name: Check test server data
        run: |
          # Check security roles
          curl -s -u testuser:testpass -H "X-Avalara-Client: test" "http://localhost:${{ env.TEST_SERVER_PORT }}/api/v2/definitions/securityroles" | jq --exit-status '.value | length > 0'

          # Check users
          curl -s -u testuser:testpass -H "X-Avalara-Client: test" "http://localhost:${{ env.TEST_SERVER_PORT }}/api/v2/users" | jq --exit-status '.value | length > 0'

          # Check ping
          curl -s -u testuser:testpass -H "X-Avalara-Client: test" "http://localhost:${{ env.TEST_SERVER_PORT }}/api/v2/utilities/ping" | jq --exit-status '.authenticated == true and .authenticatedUserName == "testuser"'

      - name: Compare synced data with test server data
        run: |
          # Get synced entitlements
          SYNCED_ENTITLEMENTS=$(baton entitlements --output-format=json | jq -c '.entitlements')
          
          # Get test server security roles (which correspond to entitlements)
          SERVER_ROLES=$(curl -s -u testuser:testpass -H "X-Avalara-Client: test" "http://localhost:${{ env.TEST_SERVER_PORT }}/api/v2/definitions/securityroles" | jq -c '.value')
          
          # Compare entitlements count
          SYNCED_COUNT=$(echo $SYNCED_ENTITLEMENTS | jq 'length')
          SERVER_COUNT=$(echo $SERVER_ROLES | jq 'length')
          
          if [ "$SYNCED_COUNT" -ne "$SERVER_COUNT" ]; then
            echo "Mismatch in entitlement count. Synced: $SYNCED_COUNT, Server: $SERVER_COUNT"
            exit 1
          fi
          
          # Similar comparisons can be added for principals and grants
          
          echo "Synced data matches test server data"

